# Generated by Django 5.0.3 on 2024-04-02 15:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Enviroment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название окружения')),
                ('description', models.TextField(max_length=10000, verbose_name='Описание окружения')),
            ],
            options={
                'verbose_name': 'Окружение',
                'verbose_name_plural': 'Окружения',
            },
        ),
        migrations.CreateModel(
            name='AccessLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название роли')),
                ('enviroment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='AccessManagementSystem.enviroment', verbose_name='Окружение')),
            ],
            options={
                'verbose_name': 'Уровень доступа',
                'verbose_name_plural': 'Уровни доступа',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(max_length=100, verbose_name='Отчество пользователя')),
                ('birthdate', models.DateField(verbose_name='Дата рождения пользователя')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('groups', models.ManyToManyField(related_name='profile_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='profile_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок увеомления')),
                ('description', models.TextField(max_length=10000, verbose_name='Содержание уведомления')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AccessManagementSystem.profile', verbose_name='Получатель')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название проекта')),
                ('description', models.TextField(max_length=10000, verbose_name='Описание проекта')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='leading_projects', to='AccessManagementSystem.profile', verbose_name='Участники')),
                ('participants', models.ManyToManyField(blank=True, related_name='participating_projects', to='AccessManagementSystem.profile')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название роли')),
                ('description', models.TextField(max_length=10000, verbose_name='Описание роли')),
                ('access_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='AccessManagementSystem.accesslevel', verbose_name='Уровень доступа')),
                ('enviroment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='AccessManagementSystem.enviroment', verbose_name='Окружение')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='role',
            field=models.ManyToManyField(blank=True, related_name='role', to='AccessManagementSystem.role'),
        ),
    ]
